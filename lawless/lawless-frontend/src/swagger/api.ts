/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IAuthClient {
  /**
   * Login the user
   * @param body (optional)
   * @return successful operation
   */
  login(body: LoginReq | null | undefined): Promise<LoginResp>;
  /**
   * Get the user
   * @return successful operation
   */
  me(): Promise<UserResp>;
  /**
   * Register a user
   * @param body (optional)
   * @return successful operation
   */
  register(body: RegisterReq | null | undefined): Promise<RegisterResp>;
}

export class AuthClient implements IAuthClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : <any>window;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * Login the user
   * @param body (optional)
   * @return successful operation
   */
  login(body: LoginReq | null | undefined, signal?: AbortSignal | undefined): Promise<LoginResp> {
    let url_ = this.baseUrl + "/api/auth/login";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      signal,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processLogin(_response);
    });
  }

  protected processLogin(response: Response): Promise<LoginResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = LoginResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<LoginResp>(<any>null);
  }

  /**
   * Get the user
   * @return successful operation
   */
  me(signal?: AbortSignal | undefined): Promise<UserResp> {
    let url_ = this.baseUrl + "/api/auth/me";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      signal,
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processMe(_response);
    });
  }

  protected processMe(response: Response): Promise<UserResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<UserResp>(<any>null);
  }

  /**
   * Register a user
   * @param body (optional)
   * @return successful operation
   */
  register(body: RegisterReq | null | undefined, signal?: AbortSignal | undefined): Promise<RegisterResp> {
    let url_ = this.baseUrl + "/api/auth/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      signal,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRegister(_response);
    });
  }

  protected processRegister(response: Response): Promise<RegisterResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = RegisterResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<RegisterResp>(<any>null);
  }
}

export interface ICaffClient {
  /**
   * Comment caff
   * @param body (optional)
   * @return successful operation
   */
  commentAdd(body: CommentAddCaffReq | null | undefined): Promise<DetailsAllCaffResp>;
  /**
   * Create and process caff
   * @return successful operation
   */
  create(file: any, name: string, description: string, price: number): Promise<CreateCaffResp>;
  /**
   * Delete caff
   * @param body (optional)
   * @return successful operation
   */
  delete(body: DeleteCaffReq | null | undefined): Promise<DeleteCaffResp>;
  /**
   * Details caff
   * @return successful operation
   */
  details(unnamed: any): Promise<DetailsCaffResp>;
  /**
   * Details all caff
   * @return successful operation
   */
  detailsAll(): Promise<DetailsAllCaffResp>;
  /**
   * Update caff
   * @param bodyBody (optional)
   * @return successful operation
   */
  update(bodyBody: string | null | undefined): Promise<UpdateCaffResp>;
}

export class CaffClient implements ICaffClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : <any>window;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * Comment caff
   * @param body (optional)
   * @return successful operation
   */
  commentAdd(body: CommentAddCaffReq | null | undefined, signal?: AbortSignal | undefined): Promise<DetailsAllCaffResp> {
    let url_ = this.baseUrl + "/api/caff/commentAdd";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      signal,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCommentAdd(_response);
    });
  }

  protected processCommentAdd(response: Response): Promise<DetailsAllCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DetailsAllCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<DetailsAllCaffResp>(<any>null);
  }

  /**
   * Create and process caff
   * @return successful operation
   */
  create(file: any, name: string, description: string, price: number, signal?: AbortSignal | undefined): Promise<CreateCaffResp> {
    let url_ = this.baseUrl + "/api/caff/create?";
    if (file === undefined || file === null)
      throw new Error("The parameter 'file' must be defined and cannot be null.");
    else
      url_ += "file=" + encodeURIComponent("" + file) + "&";
    if (name === undefined || name === null)
      throw new Error("The parameter 'name' must be defined and cannot be null.");
    else
      url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (description === undefined || description === null)
      throw new Error("The parameter 'description' must be defined and cannot be null.");
    else
      url_ += "description=" + encodeURIComponent("" + description) + "&";
    if (price === undefined || price === null)
      throw new Error("The parameter 'price' must be defined and cannot be null.");
    else
      url_ += "price=" + encodeURIComponent("" + price) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "POST",
      signal,
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreate(_response);
    });
  }

  protected processCreate(response: Response): Promise<CreateCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CreateCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<CreateCaffResp>(<any>null);
  }

  /**
   * Delete caff
   * @param body (optional)
   * @return successful operation
   */
  delete(body: DeleteCaffReq | null | undefined, signal?: AbortSignal | undefined): Promise<DeleteCaffResp> {
    let url_ = this.baseUrl + "/api/caff/delete";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      signal,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDelete(_response);
    });
  }

  protected processDelete(response: Response): Promise<DeleteCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DeleteCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<DeleteCaffResp>(<any>null);
  }

  /**
   * Details caff
   * @return successful operation
   */
  details(unnamed: any, signal?: AbortSignal | undefined): Promise<DetailsCaffResp> {
    let url_ = this.baseUrl + "/api/caff/details?";
    if (unnamed === undefined || unnamed === null)
      throw new Error("The parameter 'unnamed' must be defined and cannot be null.");
    else
      url_ += "=" + encodeURIComponent("" + unnamed) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      signal,
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDetails(_response);
    });
  }

  protected processDetails(response: Response): Promise<DetailsCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DetailsCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<DetailsCaffResp>(<any>null);
  }

  /**
   * Details all caff
   * @return successful operation
   */
  detailsAll(signal?: AbortSignal | undefined): Promise<DetailsAllCaffResp> {
    let url_ = this.baseUrl + "/api/caff/detailsAll";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      signal,
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDetailsAll(_response);
    });
  }

  protected processDetailsAll(response: Response): Promise<DetailsAllCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DetailsAllCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<DetailsAllCaffResp>(<any>null);
  }

  /**
   * Update caff
   * @param bodyBody (optional)
   * @return successful operation
   */
  update(bodyBody: string | null | undefined, signal?: AbortSignal | undefined): Promise<UpdateCaffResp> {
    let url_ = this.baseUrl + "/api/caff/update";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(bodyBody);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      signal,
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdate(_response);
    });
  }

  protected processUpdate(response: Response): Promise<UpdateCaffResp> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UpdateCaffResp.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<UpdateCaffResp>(<any>null);
  }
}

export class Comment implements IComment {
  id?: number | undefined;
  userId?: number | undefined;
  message?: string | undefined;
  timeStamp?: Date | undefined;

  constructor(data?: IComment) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.message = _data["message"];
      this.timeStamp = _data["timeStamp"] ? new Date(_data["timeStamp"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): Comment {
    data = typeof data === 'object' ? data : {};
    let result = new Comment();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["message"] = this.message;
    data["timeStamp"] = this.timeStamp ? this.timeStamp.toISOString() : <any>undefined;
    return data;
  }
}

export interface IComment {
  id?: number | undefined;
  userId?: number | undefined;
  message?: string | undefined;
  timeStamp?: Date | undefined;
}

export class CommentAddCaffReq implements ICommentAddCaffReq {
  caffId?: number | undefined;
  message?: string | undefined;

  constructor(data?: ICommentAddCaffReq) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.caffId = _data["caffId"];
      this.message = _data["message"];
    }
  }

  static fromJS(data: any): CommentAddCaffReq {
    data = typeof data === 'object' ? data : {};
    let result = new CommentAddCaffReq();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["caffId"] = this.caffId;
    data["message"] = this.message;
    return data;
  }
}

export interface ICommentAddCaffReq {
  caffId?: number | undefined;
  message?: string | undefined;
}

export class CreateCaffResp implements ICreateCaffResp {
  id?: number | undefined;

  constructor(data?: ICreateCaffResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
    }
  }

  static fromJS(data: any): CreateCaffResp {
    data = typeof data === 'object' ? data : {};
    let result = new CreateCaffResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    return data;
  }
}

export interface ICreateCaffResp {
  id?: number | undefined;
}

export class DeleteCaffReq implements IDeleteCaffReq {
  caffId?: string | undefined;

  constructor(data?: IDeleteCaffReq) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.caffId = _data["caffId"];
    }
  }

  static fromJS(data: any): DeleteCaffReq {
    data = typeof data === 'object' ? data : {};
    let result = new DeleteCaffReq();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["caffId"] = this.caffId;
    return data;
  }
}

export interface IDeleteCaffReq {
  caffId?: string | undefined;
}

export class DeleteCaffResp implements IDeleteCaffResp {
  response?: string | undefined;

  constructor(data?: IDeleteCaffResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.response = _data["response"];
    }
  }

  static fromJS(data: any): DeleteCaffResp {
    data = typeof data === 'object' ? data : {};
    let result = new DeleteCaffResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["response"] = this.response;
    return data;
  }
}

export interface IDeleteCaffResp {
  response?: string | undefined;
}

export class DetailsAllCaffResp implements IDetailsAllCaffResp {
  detailsAllCaffResponse?: DetailsCaffResp[] | undefined;

  constructor(data?: IDetailsAllCaffResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["detailsAllCaffResponse"])) {
        this.detailsAllCaffResponse = [] as any;
        for (let item of _data["detailsAllCaffResponse"])
          this.detailsAllCaffResponse!.push(DetailsCaffResp.fromJS(item));
      }
    }
  }

  static fromJS(data: any): DetailsAllCaffResp {
    data = typeof data === 'object' ? data : {};
    let result = new DetailsAllCaffResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.detailsAllCaffResponse)) {
      data["detailsAllCaffResponse"] = [];
      for (let item of this.detailsAllCaffResponse)
        data["detailsAllCaffResponse"].push(item.toJSON());
    }
    return data;
  }
}

export interface IDetailsAllCaffResp {
  detailsAllCaffResponse?: DetailsCaffResp[] | undefined;
}

export class DetailsCaffResp implements IDetailsCaffResp {
  id?: number | undefined;
  userId?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  uploaded?: Date | undefined;
  price?: number | undefined;
  comments?: Comment[] | undefined;
  previewPicture?: string | undefined;
  userPersonalData?: UserPersonalData | undefined;

  constructor(data?: IDetailsCaffResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.name = _data["name"];
      this.description = _data["description"];
      this.uploaded = _data["uploaded"] ? new Date(_data["uploaded"].toString()) : <any>undefined;
      this.price = _data["price"];
      if (Array.isArray(_data["comments"])) {
        this.comments = [] as any;
        for (let item of _data["comments"])
          this.comments!.push(Comment.fromJS(item));
      }
      this.previewPicture = _data["previewPicture"];
      this.userPersonalData = _data["userPersonalData"] ? UserPersonalData.fromJS(_data["userPersonalData"]) : <any>undefined;
    }
  }

  static fromJS(data: any): DetailsCaffResp {
    data = typeof data === 'object' ? data : {};
    let result = new DetailsCaffResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["name"] = this.name;
    data["description"] = this.description;
    data["uploaded"] = this.uploaded ? this.uploaded.toISOString() : <any>undefined;
    data["price"] = this.price;
    if (Array.isArray(this.comments)) {
      data["comments"] = [];
      for (let item of this.comments)
        data["comments"].push(item.toJSON());
    }
    data["previewPicture"] = this.previewPicture;
    data["userPersonalData"] = this.userPersonalData ? this.userPersonalData.toJSON() : <any>undefined;
    return data;
  }
}

export interface IDetailsCaffResp {
  id?: number | undefined;
  userId?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  uploaded?: Date | undefined;
  price?: number | undefined;
  comments?: Comment[] | undefined;
  previewPicture?: string | undefined;
  userPersonalData?: UserPersonalData | undefined;
}

export class LoginReq implements ILoginReq {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: ILoginReq) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): LoginReq {
    data = typeof data === 'object' ? data : {};
    let result = new LoginReq();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface ILoginReq {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export class LoginResp implements ILoginResp {
  token?: string | undefined;
  userPersonalData?: UserPersonalData | undefined;
  roles?: Role[] | undefined;

  constructor(data?: ILoginResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.token = _data["token"];
      this.userPersonalData = _data["userPersonalData"] ? UserPersonalData.fromJS(_data["userPersonalData"]) : <any>undefined;
      if (Array.isArray(_data["roles"])) {
        this.roles = [] as any;
        for (let item of _data["roles"])
          this.roles!.push(Role.fromJS(item));
      }
    }
  }

  static fromJS(data: any): LoginResp {
    data = typeof data === 'object' ? data : {};
    let result = new LoginResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["token"] = this.token;
    data["userPersonalData"] = this.userPersonalData ? this.userPersonalData.toJSON() : <any>undefined;
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles)
        data["roles"].push(item.toJSON());
    }
    return data;
  }
}

export interface ILoginResp {
  token?: string | undefined;
  userPersonalData?: UserPersonalData | undefined;
  roles?: Role[] | undefined;
}

export class RegisterReq implements IRegisterReq {
  userPersonalData?: UserPersonalData | undefined;
  password?: string | undefined;

  constructor(data?: IRegisterReq) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userPersonalData = _data["userPersonalData"] ? UserPersonalData.fromJS(_data["userPersonalData"]) : <any>undefined;
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): RegisterReq {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterReq();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userPersonalData"] = this.userPersonalData ? this.userPersonalData.toJSON() : <any>undefined;
    data["password"] = this.password;
    return data;
  }
}

export interface IRegisterReq {
  userPersonalData?: UserPersonalData | undefined;
  password?: string | undefined;
}

export class RegisterResp implements IRegisterResp {
  value?: string | undefined;

  constructor(data?: IRegisterResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data["value"];
    }
  }

  static fromJS(data: any): RegisterResp {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["value"] = this.value;
    return data;
  }
}

export interface IRegisterResp {
  value?: string | undefined;
}

export class Role implements IRole {
  name?: RoleName | undefined;

  constructor(data?: IRole) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): Role {
    data = typeof data === 'object' ? data : {};
    let result = new Role();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["name"] = this.name;
    return data;
  }
}

export interface IRole {
  name?: RoleName | undefined;
}

export class UpdateCaffResp implements IUpdateCaffResp {
  response?: string | undefined;

  constructor(data?: IUpdateCaffResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.response = _data["response"];
    }
  }

  static fromJS(data: any): UpdateCaffResp {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateCaffResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["response"] = this.response;
    return data;
  }
}

export interface IUpdateCaffResp {
  response?: string | undefined;
}

export class UserPersonalData implements IUserPersonalData {
  username?: string | undefined;
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  userId?: string | undefined;

  constructor(data?: IUserPersonalData) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.email = _data["email"];
      this.firstName = _data["firstName"];
      this.lastName = _data["lastName"];
      this.userId = _data["userId"];
    }
  }

  static fromJS(data: any): UserPersonalData {
    data = typeof data === 'object' ? data : {};
    let result = new UserPersonalData();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["email"] = this.email;
    data["firstName"] = this.firstName;
    data["lastName"] = this.lastName;
    data["userId"] = this.userId;
    return data;
  }
}

export interface IUserPersonalData {
  username?: string | undefined;
  email?: string | undefined;
  firstName?: string | undefined;
  lastName?: string | undefined;
  userId?: string | undefined;
}

export class UserResp implements IUserResp {
  userPersonalData?: UserPersonalData | undefined;
  roles?: Role[] | undefined;

  constructor(data?: IUserResp) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userPersonalData = _data["userPersonalData"] ? UserPersonalData.fromJS(_data["userPersonalData"]) : <any>undefined;
      if (Array.isArray(_data["roles"])) {
        this.roles = [] as any;
        for (let item of _data["roles"])
          this.roles!.push(Role.fromJS(item));
      }
    }
  }

  static fromJS(data: any): UserResp {
    data = typeof data === 'object' ? data : {};
    let result = new UserResp();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userPersonalData"] = this.userPersonalData ? this.userPersonalData.toJSON() : <any>undefined;
    if (Array.isArray(this.roles)) {
      data["roles"] = [];
      for (let item of this.roles)
        data["roles"].push(item.toJSON());
    }
    return data;
  }
}

export interface IUserResp {
  userPersonalData?: UserPersonalData | undefined;
  roles?: Role[] | undefined;
}

export enum RoleName {
  ROLE_USER = "ROLE_USER",
  ROLE_ADMIN = "ROLE_ADMIN",
}

export class LawlessException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isLawlessException = true;

  static isLawlessException(obj: any): obj is LawlessException {
    return obj.isLawlessException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new LawlessException(message, status, response, headers, null);
}